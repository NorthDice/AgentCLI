"""
–ö–æ–º–∞–Ω–¥–∞ fix –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ FixManager.
"""
import click
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from agentcli.core.fix_manager import FixManager
from agentcli.core import get_llm_service
from agentcli.utils.logging import logger as app_logger
from rich.syntax import Syntax
import os

@click.command()
@click.argument('description', required=True)
@click.argument('targets', nargs=-1, required=True)
@click.option('--yes', '-y', is_flag=True, help='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
def fix(description, targets, yes):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏–º–ø–æ—Ä—Ç–æ–≤.
    
    DESCRIPTION ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
    TARGETS ‚Äî —Ñ–∞–π–ª—ã –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
    """
    console = Console()
    root_path = Path.cwd()
    llm_service = get_llm_service()
    fix_manager = FixManager(root_path, llm_service)
    target_paths = [root_path / Path(t) for t in targets]
    
    console.print(Panel(f"[bold cyan]–ó–∞–¥–∞—á–∞:[/] {description}\n[bold]–¶–µ–ª–µ–≤—ã–µ —Ñ–∞–π–ª—ã:[/]\n" + '\n'.join(str(p) for p in target_paths), title="Fix Command"))
    
    # 1. –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
    result = fix_manager.fix_with_context(description, target_paths)
    plan = result['plan']
    validation = result['validation']
    
    console.print(Panel(display_plan_safely(result['plan']), title="üîß –ü–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"))
    if validation['is_valid']:
        console.print("[green]–ü–ª–∞–Ω –≤–∞–ª–∏–¥–µ–Ω. –ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.[/]")
        def confirm_change(msg):
            if yes:
                return True
            return click.confirm(msg, default=True)
        apply_result = fix_manager.apply_fix_plan(result, confirm_callback=confirm_change)
        if apply_result['success']:
            console.print(f"[bold green]‚úì[/] –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω! –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(apply_result['applied_changes'])}")
            if apply_result['import_fixes']:
                console.print(f"[yellow]–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {len(apply_result['import_fixes'])}")
            # Beautiful output for applied changes
            console.print("\n[bold]Applied Changes:[/]")
            for i, change in enumerate(apply_result['applied_changes'], 1):
                result = change.get('result', {})
                path = result.get('path', '')
                status = change.get('status', '')
                description = change.get('description', '')
                content = result.get('content', '')
                panel = Panel(
                    f"[bold]Path:[/] {path}\n"
                    f"[bold]Status:[/] {status}\n"
                    f"[bold]Description:[/] {description}",
                    title=f"Change #{i}",
                    expand=False
                )
                console.print(panel)
                if content:
                    ext = os.path.splitext(path)[1] if path else ".txt"
                    syntax = Syntax(
                        content,
                        ext.lstrip(".") if ext else "text",
                        theme="monokai",
                        line_numbers=True
                    )
                    console.print(syntax)
        else:
            console.print("[bold red]‚úó[/] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:")
            for error in apply_result['errors']:
                console.print(f"  - {error}")
    else:
        console.print("[bold red]‚úó[/] –ü–ª–∞–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é:")
        for error in validation['errors']:
            console.print(f"  - {error}")
            
            
def display_plan_safely(plan):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    plan_text = []
    
    if 'description' in plan:
        plan_text.append(f"[bold]–û–ø–∏—Å–∞–Ω–∏–µ:[/] {plan['description']}")
    
    if 'changes' in plan and plan['changes']:
        plan_text.append("\n[bold]–ò–∑–º–µ–Ω–µ–Ω–∏—è:[/]")
        for i, change in enumerate(plan['changes'], 1):
            plan_text.append(f"  {i}. {change}")
    else:
        plan_text.append("\n[yellow]‚ö†Ô∏è –ü–ª–∞–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π[/]")
    
    if 'warnings' in plan and plan['warnings']:
        plan_text.append("\n[bold red]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:[/]")
        for warning in plan['warnings']:
            plan_text.append(f"  ‚ö†Ô∏è {warning}")
    
    if 'estimated_impact' in plan:
        plan_text.append(f"\n[bold]–û–∂–∏–¥–∞–µ–º–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ:[/] {plan['estimated_impact']}")
    
    return '\n'.join(plan_text)